generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @default(uuid()) @id
  firstName String
  lastName  String
  username  String
  email     String    @unique
  password  String

  profile   Profile?
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  shares    Share[]
  followers Follow[] @relation("followers")
  following Follow[] @relation("following")
  sentMessages Message[] @relation("sentMessages")
  receivedMessages Message[] @relation("receivedMessages")
  notifications Notification[]

  @@map("users")
}

model Profile {
  id          String @id @default(uuid())
  profileImage String
  bio          String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("profile")
}

model Post {
  id        String    @default(uuid()) @id
  title     String
  image     String
  excerpt   String
  body      String
  userId    String
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
  shares    Share[]

  @@map("posts")
}

model Like {
  id        String   @default(uuid()) @id
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @default(uuid()) @id
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Share {
  id        String   @default(uuid()) @id
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @default(uuid()) @id
  type      String   // e.g., "like", "comment", "follow", etc.
  message   String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id        String   @default(uuid()) @id
  followerId String
  followingId String
  createdAt  DateTime @default(now())

  follower   User     @relation("followers", fields: [followerId], references: [id])
  following  User     @relation("following", fields: [followingId], references: [id])
}

model Message {
  id        String   @default(uuid()) @id
  content   String
  senderId  String
  receiverId String
  createdAt DateTime @default(now())

  sender     User     @relation("sentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id])
}
